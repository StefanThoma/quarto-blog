<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Notes</title>
<link>https://blog.djnavarro.net/index.html</link>
<atom:link href="https://blog.djnavarro.net/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<image>
<url>https://blog.djnavarro.net/frontimage.png</url>
<title>Notes</title>
<link>https://blog.djnavarro.net/index.html</link>
</image>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Sun, 08 Jan 2023 23:00:00 GMT</lastBuildDate>
<item>
  <title>What is this???</title>
  <dc:creator>Stefan Thoma</dc:creator>
  <link>https://blog.djnavarro.net/posts/2021-01 -09_welcome/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>The structure of this Blog is based on a fork of the <a href="https://github.com/djnavarro/quarto-blog">GitHub repo</a> of <a href="https://blog.djnavarro.net/">the fantastic blog by Danielle Navarro</a>, please check it out!</p>
<!--------------- appendices go here ----------------->
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2023-01-09 17:40:53 CET</p>
</div></section><section id="details" class="level2 appendix"><h2 class="quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/StefanThoma/quarto-blog/tree/main/posts/2023-01-09_welcome/index.qmd">source code</a>, <a href="https://github.com/StefanThoma/quarto-blog/tree/main/posts/2023-01-09_welcome/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{thoma2023,
  author = {Stefan Thoma},
  title = {What Is This???},
  date = {2023-01-09},
  url = {https://blog.djnavarro.net/posts/2021-01 -09_welcome},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-thoma2023" class="csl-entry quarto-appendix-citeas">
Stefan Thoma. 2023. <span>“What Is This???”</span> January 9, 2023. <a href="https://blog.djnavarro.net/posts/2021-01 -09_welcome">https://blog.djnavarro.net/posts/2021-01
-09_welcome</a>.
</div></div></section></div> ]]></description>
  <category>Blogging</category>
  <guid>https://blog.djnavarro.net/posts/2021-01 -09_welcome/index.html</guid>
  <pubDate>Sun, 08 Jan 2023 23:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2021-01 -09_welcome/welcome.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Using CICD to check spelling in quarto documents</title>
  <dc:creator>Stefan Thoma</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-01-09_CICD-spelling/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>As a data scientist or R programmer, you may be familiar with the benefits of version control systems like GitHub for tracking changes to your code base and collaborating with others. But did you know that you can also use GitHub to automate the testing, building, and deployment of your R projects? This process, known as continuous integration and deployment (CICD), can save you time and effort by ensuring that your code is always in a deploy-able state and by automatically delivering new updates to your users. In this blog post, we will show you how to set up CICD for your quarto documents on GitHub, including configuring a build pipeline and integrating a spelling checker. By the end of this tutorial, you will have a workflow in place that helps you catch spelling mistakes before they make it into your final documents.</p>
<section id="cicd" class="level2">
<h2 class="anchored" data-anchor-id="cicd">CICD</h2>
<p>CICD is often used in GitHub projects for package development where it helps to maintain a certain code-quality and style consistency across different contributors and developers. For R projects other than packages CICD is used much less frequently. I belief that setting up CICD pipelines for less complex projects with only very few contributors is still useful to ensure consistent style, spelling, and more.</p>
<p>As I am occasionally involved in creating teaching materials in R using quarto, I wanted to implement some CICD checks for quarto documents. As most out-of-the-box CICD pipelines are designed for package development, existing pipelines needed some adjustment to work with other R projects.</p>
</section>
<section id="aim" class="level2">
<h2 class="anchored" data-anchor-id="aim">Aim</h2>
<p>When creating teaching materials in R I rely on GitHub for version control. Generally, I have a <code>main</code>-branch which deploys to a GitHub-page displaying the rendered content. The development of materials happens on the <code>devel</code> branch with a pending merge request to the <code>main</code> branch. Whenever a chapter or a section is ready to be published, I merge the branches. I wanted to create a pipeline that runs a spell-check on all my quarto files on the merge request with <code>main</code>, i.e.: Whenever I push to <code>devel</code> I want GitHub to run the CICD pipeline to check my spelling. As an example, I will show how to implement spelling CICD on this blog-project.</p>
</section>
<section id="spell-check" class="level2">
<h2 class="anchored" data-anchor-id="spell-check">Spell-check</h2>
<p>Because R is all I know, I would like to use an R-package to do the spell-checking. The <code>spelling</code> package is well suited for the task, as it allows to spell-check all files at once. Before we try to implement the CICD pipeline, the spell-checker has to work locally, so we first install and load the package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">install.packages</span>(spelling)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching packages ─────────────────────────────────── tidyverse 1.3.2 ──
✔ ggplot2 3.4.0      ✔ purrr   1.0.0 
✔ tibble  3.1.8      ✔ dplyr   1.0.10
✔ tidyr   1.2.1      ✔ stringr 1.5.0 
✔ readr   2.1.3      ✔ forcats 0.5.2 
── Conflicts ────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(spelling)</span></code></pre></div>
</div>
<p>If you are working on a package, you can directly use the function <code>spell_check_package()</code> and the <code>spelling</code> package will do so. If you are working on any other R project you have to use the <code>spell_check_files()</code> function and you have to include a path to the files you want to check. Let’s check just this file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">#2023-01-09_CICD-spelling/</span></span>
<span id="cb5-2">spelling<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">spell_check_files</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"index.qmd"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  WORD        FOUND IN
CICD        index.qmd:2,6,8,9,16,27,28,31,33,34,35,37,38,46,47,53,68,71,102,103
eval        index.qmd:56
github      index.qmd:102
lockfile    index.qmd:17
png         index.qmd:9
qmd         index.qmd:69,81,89
renv        index.qmd:17
Thoma       index.qmd:4
tidyverse   index.qmd:61
wordlist    index.qmd:76,81,85,90</code></pre>
</div>
</div>
<p>It looks like there are a few words that spelling did not recognize, mostly file extensions, my last name, and the word <em>CICD</em> (which apparently I overuse). We should carefully look through this list and decide, whether any mistakes were made. We would not want the GitHub action to prohibit a merge request for any of these words, as there are no typos present (I hope). Therefore, we want to add these words to a file that include words to be ignored by the <code>spelling</code> package.</p>
<p>If you are working on a package, this is easy, you can use the <code>spelling::update_wordlist()</code> function. We simply save the list of words as a <em>.txt</em> file. For now, we save it in the working directory.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">write</span>(spelling<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">spell_check_files</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"index.qmd"</span>)[[<span class="dv" style="color: #AD0000;">1</span>]], <span class="st" style="color: #20794D;">"wordlist.txt"</span>)</span></code></pre></div>
</div>
<p>The file looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">read_lines</span>(<span class="st" style="color: #20794D;">"wordlist.txt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "CICD"      "eval"      "github"    "lockfile"  "png"       "qmd"      
 [7] "renv"      "Thoma"     "tidyverse" "wordlist" </code></pre>
</div>
</div>
<p>Now we can tell <code>spelling</code> to ignore the words in this file from typo-detection:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">spelling<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">spell_check_files</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"index.qmd"</span>, </span>
<span id="cb10-2">                            <span class="at" style="color: #657422;">ignore =</span> <span class="fu" style="color: #4758AB;">read_lines</span>(<span class="st" style="color: #20794D;">"wordlist.txt"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>No spelling errors found.</code></pre>
</div>
</div>
<ul>
<li>link to the package description spelling</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">list.files</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"../.."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "_quarto.yml"       "_site"             "blank_preview.jpg"
[4] "ember.scss"        "frontimage.png"    "index.qmd"        
[7] "posts"             "quarto-blog.Rproj" "styles.css"       </code></pre>
</div>
</div>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>To implement GitHub CICD I create a folder <code>.github</code> in the project directory, and the folder <code>workflows</code> within the <code>.github</code> folder. This is where I store my CICD pipelines.</p>
<!--------------- appendices go here ----------------->


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{thoma2023,
  author = {Stefan Thoma},
  title = {Using {CICD} to Check Spelling in Quarto Documents},
  date = {2023-01-01},
  url = {https://blog.djnavarro.net/posts/2023-01-09_CICD-spelling},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-thoma2023" class="csl-entry quarto-appendix-citeas">
Stefan Thoma. 2023. <span>“Using CICD to Check Spelling in Quarto
Documents.”</span> January 1, 2023. <a href="https://blog.djnavarro.net/posts/2023-01-09_CICD-spelling">https://blog.djnavarro.net/posts/2023-01-09_CICD-spelling</a>.
</div></div></section></div> ]]></description>
  <category>CICD</category>
  <category>R</category>
  <category>GitHub</category>
  <category>Quarto</category>
  <guid>https://blog.djnavarro.net/posts/2023-01-09_CICD-spelling/index.html</guid>
  <pubDate>Sat, 31 Dec 2022 23:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-01-09_CICD-spelling/CICD.png" medium="image" type="image/png" height="141" width="144"/>
</item>
</channel>
</rss>
