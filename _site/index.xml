<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Notes</title>
<link>https://StefanThoma.github.io/quarto-blog/index.html</link>
<atom:link href="https://StefanThoma.github.io/quarto-blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<image>
<url>https://StefanThoma.github.io/quarto-blog/frontimage.png</url>
<title>Notes</title>
<link>https://StefanThoma.github.io/quarto-blog/index.html</link>
<height>141</height>
<width>144</width>
</image>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Sun, 08 Jan 2023 23:00:00 GMT</lastBuildDate>
<item>
  <title>What is this???</title>
  <dc:creator>Stefan Thoma</dc:creator>
  <link>https://StefanThoma.github.io/quarto-blog/posts/2023-01-09_welcome/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>The structure of this Blog is based on a fork of the <a href="https://github.com/djnavarro/quarto-blog">GitHub repo</a> of <a href="https://blog.djnavarro.net/">the fantastic blog by Danielle Navarro</a>, please check it out!</p>
<!--------------- appendices go here ----------------->
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2023-01-10 10:30:55 CET</p>
</div></section><section id="details" class="level2 appendix"><h2 class="quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/StefanThoma/quarto-blog/tree/main/posts/2023-01-09_welcome/index.qmd">source code</a>, <a href="https://github.com/StefanThoma/quarto-blog/tree/main/posts/2023-01-09_welcome/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{thoma2023,
  author = {Stefan Thoma},
  title = {What Is This???},
  date = {2023-01-09},
  url = {https://StefanThoma.github.io/quarto-blog//posts/2023-01-09_welcome},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-thoma2023" class="csl-entry quarto-appendix-citeas">
Stefan Thoma. 2023. <span>“What Is This???”</span> January 9, 2023. <a href="https://StefanThoma.github.io/quarto-blog//posts/2023-01-09_welcome">https://StefanThoma.github.io/quarto-blog//posts/2023-01-09_welcome</a>.
</div></div></section></div> ]]></description>
  <category>Blogging</category>
  <guid>https://StefanThoma.github.io/quarto-blog/posts/2023-01-09_welcome/index.html</guid>
  <pubDate>Sun, 08 Jan 2023 23:00:00 GMT</pubDate>
  <media:content url="https://StefanThoma.github.io/quarto-blog/posts/2023-01-09_welcome/welcome.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Using CICD to check spelling in quarto documents</title>
  <dc:creator>Stefan Thoma</dc:creator>
  <link>https://StefanThoma.github.io/quarto-blog/posts/2023-01-09_CICD-spelling/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>As a data scientist or R programmer, you may be familiar with the benefits of version control systems like GitHub for tracking changes to your code base and collaborating with others. But did you know that you can also use GitHub to automate the testing, building, and deployment of your R projects? This process, known as continuous integration and deployment (CICD), can save you time and effort by ensuring that your code is always in a deploy-able state and by automatically delivering new updates to your users. In this blog post, we will show you how to set up CICD for your quarto documents on GitHub, including configuring a build pipeline and integrating a spelling checker. By the end of this tutorial, you will have a workflow in place that helps you catch spelling mistakes before they make it into your final documents.</p>
<section id="cicd" class="level2">
<h2 class="anchored" data-anchor-id="cicd">CICD</h2>
<p>CICD is often used in GitHub projects for package development where it helps to maintain a certain code-quality and style consistency across different contributors and developers. For R projects other than packages CICD is used much less frequently. I belief that setting up CICD pipelines for less complex projects with only very few contributors is still useful to ensure consistent style, spelling, and more.</p>
<p>As I am occasionally involved in creating teaching materials in R using quarto, I wanted to implement some CICD checks for quarto documents. As most out-of-the-box CICD pipelines are designed for package development, existing pipelines needed some adjustment to work with other R projects.</p>
</section>
<section id="aim" class="level2">
<h2 class="anchored" data-anchor-id="aim">Aim</h2>
<p>When creating teaching materials in R I rely on GitHub for version control. Generally, I have a <code>main</code>-branch which deploys to a GitHub-page displaying the rendered content. The development of materials happens on the <code>devel</code> branch with a pending merge request to the <code>main</code> branch. Whenever a chapter or a section is ready to be published, I merge the branches. I wanted to create a pipeline that runs a spell-check on all my quarto files on the merge request with <code>main</code>, i.e.: Whenever I push to <code>devel</code> I want GitHub to run the CICD pipeline to check my spelling. As an example, I will show how to implement spelling CICD on this blog-project.</p>
</section>
<section id="spell-check" class="level2">
<h2 class="anchored" data-anchor-id="spell-check">Spell-check</h2>
<p>Because R is all I know, I would like to use an R-package to do the spell-checking. The <code>spelling</code> package is well suited for the task, as it allows to spell-check all files at once. Before we try to implement the CICD pipeline, the spell-checker has to work locally, so we first install and load the package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">install.packages</span>(spelling)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching packages ─────────────────────────────────── tidyverse 1.3.2 ──
✔ ggplot2 3.4.0      ✔ purrr   1.0.0 
✔ tibble  3.1.8      ✔ dplyr   1.0.10
✔ tidyr   1.2.1      ✔ stringr 1.5.0 
✔ readr   2.1.3      ✔ forcats 0.5.2 
── Conflicts ────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(spelling)</span></code></pre></div>
</div>
<p>If you are working on a package, you can directly use the function <code>spell_check_package()</code> and the <code>spelling</code> package will do so. If you are working on any other R project you have to use the <code>spell_check_files()</code> function and you have to include a path to the files you want to check. Let’s check just this file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">#2023-01-09_CICD-spelling/</span></span>
<span id="cb5-2">spelling<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">spell_check_files</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"index.qmd"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  WORD         FOUND IN
callout      index.qmd:109
CICD         index.qmd:2,6,8,9,16,27,28,31,33,34,35,37,38,46,47,53,70,74,117,128,149,150,151,153,237,279
desc         index.qmd:231,265
djnavarro    index.qmd:211
english      index.qmd:273,275
eval         index.qmd:56,131,156,182,240
german       index.qmd:273
github       index.qmd:150
https        index.qmd:211
hunspell     index.qmd:274
ìnst        index.qmd:224
lockfile     index.qmd:17
png          index.qmd:9
qmd          index.qmd:71,84,96,106,112,113,124,141,173,204,233,257
qmd's        index.qmd:103
readr        index.qmd:173,204,233,257,268
renv         index.qmd:17
repo         index.qmd:165,196,216,249
Rproj        index.qmd:112
Rscript      index.qmd:170,174,201,205,220,254,258,262
subfolders   index.qmd:105
testthat     index.qmd:231,232,260,261,265,266
Thoma        index.qmd:4
tidyverse    index.qmd:61,163,194,212,247
ubuntu       index.qmd:162,193,246
wordlist     index.qmd:79,84,90,97,121,132
WORDLIST     index.qmd:128,132,135,142,173,204,224,233,257,268
yaml         index.qmd:153,155,181,190,239</code></pre>
</div>
</div>
<p>It looks like there are a few words that spelling did not recognize, mostly file extensions, my last name, and the word <em>CICD</em> (which apparently I overuse). We should carefully look through this list and decide, whether any mistakes were made. We would not want the GitHub action to prohibit a merge request for any of these words, as there are no typos present (I hope). Therefore, we want to add these words to a file that include words to be ignored by the <code>spelling</code> package.</p>
<p>If you are working on a package, this is easy, you can use the <code>spelling::update_wordlist()</code> function. We simply save the list of words as a <em>.txt</em> file. For now, we save it in the working directory.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">write</span>(spelling<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">spell_check_files</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"index.qmd"</span>)[[<span class="dv" style="color: #AD0000;">1</span>]], <span class="st" style="color: #20794D;">"wordlist.txt"</span>)</span></code></pre></div>
</div>
<p>The file looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">read_lines</span>(<span class="st" style="color: #20794D;">"wordlist.txt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "callout"    "CICD"       "desc"       "djnavarro"  "english"   
 [6] "eval"       "german"     "github"     "https"      "hunspell"  
[11] "ìnst"       "lockfile"   "png"        "qmd"        "qmd's"     
[16] "readr"      "renv"       "repo"       "Rproj"      "Rscript"   
[21] "subfolders" "testthat"   "Thoma"      "tidyverse"  "ubuntu"    
[26] "wordlist"   "WORDLIST"   "yaml"      </code></pre>
</div>
</div>
<p>Now we can tell <code>spelling</code> to ignore the words in this file from typo-detection:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">spelling<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">spell_check_files</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"index.qmd"</span>, </span>
<span id="cb10-2">                            <span class="at" style="color: #657422;">ignore =</span> <span class="fu" style="color: #4758AB;">read_lines</span>(<span class="st" style="color: #20794D;">"wordlist.txt"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>No spelling errors found.</code></pre>
</div>
</div>
<ul>
<li>link to the package description spelling</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># we can get all qmd's in a project by </span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;">list.files</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"../.."</span>, <span class="co" style="color: #5E5E5E;"># first setting the path to the project</span></span>
<span id="cb12-3">           <span class="at" style="color: #657422;">recursive =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="co" style="color: #5E5E5E;"># include subfolders</span></span>
<span id="cb12-4">           <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">".*.qmd$"</span>) <span class="co" style="color: #5E5E5E;"># include only files ending in .qmd</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "index.qmd"                               
[2] "posts/2023-01-09_CICD-spelling/index.qmd"
[3] "posts/2023-01-09_welcome/index.qmd"      </code></pre>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
path
</div>
</div>
<div class="callout-body-container callout-body">
<p>The structure of this project is such that each blog-post .qmd file is two folders down from the .Rproj file. The working directory of the .qmd blog-post file is where the file is located. If I want to list files or save files in a higher order folder I need to adjust my path to first go two folders up. I do this by adding <code>"../.."</code> to my file paths.</p>
<p>The working directory of the CICD pipeline is by default on project level, therefore, the <code>"../.."</code> is not required.</p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">wordlist <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list.files</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"../.."</span>, </span>
<span id="cb14-2">                       <span class="at" style="color: #657422;">recursive =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, </span>
<span id="cb14-3">                       <span class="at" style="color: #657422;">full.names =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb14-4">                       <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">".*.qmd$"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-5">  spelling<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">spell_check_files</span>()</span></code></pre></div>
</div>
<p>This can now be saved into a project level WORDLIST file to be accessed later by our CICD workflow.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">write</span>(<span class="at" style="color: #657422;">x =</span> wordlist[[<span class="dv" style="color: #AD0000;">1</span>]], <span class="at" style="color: #657422;">file =</span>   <span class="st" style="color: #20794D;">"../../inst/WORDLIST.txt"</span>)</span></code></pre></div>
</div>
<p>Check again with WORDLIST:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">list.files</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"../.."</span>, </span>
<span id="cb16-2">                       <span class="at" style="color: #657422;">recursive =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, </span>
<span id="cb16-3">                       <span class="at" style="color: #657422;">full.names =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb16-4">                       <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">".*.qmd$"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-5">  spelling<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">spell_check_files</span>(<span class="at" style="color: #657422;">ignore =</span> <span class="fu" style="color: #4758AB;">read_lines</span>(<span class="st" style="color: #20794D;">"../../inst/WORDLIST.txt"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  WORD       FOUND IN
callout    index.qmd:109
english    index.qmd:273,275
german     index.qmd:273
hunspell   index.qmd:274
Rproj      index.qmd:112</code></pre>
</div>
</div>
<p>Looks like it worked — great!</p>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>Now this needs to be implemented in the CICD pipeline. To implement GitHub CICD I create a folder <code>.github</code> in the project directory, and the folder <code>workflows</code> within the <code>.github</code> folder. This is where CICD pipelines are stored.</p>
<p>CICD pipelines written in <code>yaml</code> format, it should look like this:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb18-1"><span class="co" style="color: #5E5E5E;">#| eval: false</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Spellcheck</span></span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;">on</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb18-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">pull_request</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">{</span><span class="fu" style="color: #4758AB;">branches</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="st" style="color: #20794D;">'main'</span><span class="kw" style="color: #003B4F;">]}</span></span>
<span id="cb18-5"><span class="fu" style="color: #4758AB;">jobs</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb18-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">Spelling</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb18-7"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">runs-on</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ubuntu-latest</span></span>
<span id="cb18-8"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">container</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">{</span><span class="fu" style="color: #4758AB;">image</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"rocker/tidyverse:4.2.1"</span><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb18-9"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">steps</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb18-10"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Checkout repo</span></span>
<span id="cb18-11"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">uses</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> actions/checkout@v3</span></span>
<span id="cb18-12"></span>
<span id="cb18-13"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Install spelling</span></span>
<span id="cb18-14"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">run</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> if (!require("spelling")) install.packages("spelling")</span></span>
<span id="cb18-15"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">shell</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Rscript {0}</span></span>
<span id="cb18-16"></span>
<span id="cb18-17"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Run Spelling Check test</span></span>
<span id="cb18-18"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">run</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> spelling::spell_check_files(list.files(pattern = ".*.qmd$", recursive = TRUE), ignore = readr::read_lines("inst/WORDLIST.txt"))</span></span>
<span id="cb18-19"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">shell</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Rscript {0}</span></span></code></pre></div>
<p>The first few lines define the name of the workflow (<code>Spellcheck</code>) and when it should be executed.<br>
</p>
<p>In this case, the action runs on pull requests to the <code>main</code> branch.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb19-1"><span class="co" style="color: #5E5E5E;">#| eval: false</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Spellcheck</span></span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;">on</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb19-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">pull_request</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">{</span><span class="fu" style="color: #4758AB;">branches</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="st" style="color: #20794D;">'main'</span><span class="kw" style="color: #003B4F;">]}</span></span></code></pre></div>
<p>Then, we define the job to run:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb20-1"><span class="fu" style="color: #4758AB;">jobs</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb20-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">Spelling</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb20-3"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">runs-on</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ubuntu-latest</span></span>
<span id="cb20-4"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">container</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">{</span><span class="fu" style="color: #4758AB;">image</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"rocker/tidyverse:4.2.1"</span><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb20-5"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">steps</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb20-6"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Checkout repo</span></span>
<span id="cb20-7"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">uses</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> actions/checkout@v3</span></span>
<span id="cb20-8"></span>
<span id="cb20-9"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Install spelling</span></span>
<span id="cb20-10"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">run</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> if (!require("spelling")) install.packages("spelling")</span></span>
<span id="cb20-11"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">shell</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Rscript {0}</span></span>
<span id="cb20-12"></span>
<span id="cb20-13"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Run Spelling Check test</span></span>
<span id="cb20-14"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">run</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> spelling::spell_check_files(list.files(pattern = ".*.qmd$", recursive = TRUE), ignore = readr::read_lines("inst/WORDLIST.txt"))</span></span>
<span id="cb20-15"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">shell</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Rscript {0}</span></span>
<span id="cb20-16"><span class="at" style="color: #657422;">        </span></span></code></pre></div>
<p>We run just one job called <code>Spelling</code>.</p>
<p>It is run on a <a href="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/">docker image</a> deployed by GitHub. We use a particular docker image that comes with R and tidyverse preinstalled, this eases the use of R in this image.</p>
<p>The actual workflow is defined in the <code>steps</code> (which can be named) — here we only have three steps.</p>
<ul>
<li><p><code>actions/checkout@v3</code> loads the GitHub repository so the subsequent steps can reference the repo.</p></li>
<li><p>Next, the <em>Install spelling</em> step installs the R package <code>spelling</code>. This is written in R code, so we need to specify that we run the command in R. We do this with the instruction <code>shell: Rscript {0}</code>.</p></li>
<li><p>At last, we run the spell check in R. By default, the code is executed in the project level directory, so we do not need to adjust the path in the <code>list.files()</code> function to go up the project directory. The same goes for the <code>ìnst/WORDLIST</code> file.</p></li>
</ul>
<p>Now while this works, it will not throw an error if typos are spotted. We can remedy this by writing code that throws an error if there is a typo:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">testthat<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">test_that</span>(<span class="at" style="color: #657422;">desc =</span> <span class="st" style="color: #20794D;">"No Typo"</span>, </span>
<span id="cb21-2">                    <span class="at" style="color: #657422;">code =</span> testthat<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">expect_equal</span>(</span>
<span id="cb21-3">                      <span class="at" style="color: #657422;">object =</span> spelling<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">spell_check_files</span>(<span class="at" style="color: #657422;">path =</span> <span class="fu" style="color: #4758AB;">list.files</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"../.."</span>, <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">".*.qmd$"</span>, <span class="at" style="color: #657422;">recursive =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="at" style="color: #657422;">full.names =</span> <span class="cn" style="color: #8f5902;">TRUE</span>), <span class="at" style="color: #657422;">ignore =</span> readr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_lines</span>(<span class="st" style="color: #20794D;">"../../inst/WORDLIST.txt"</span>)),</span>
<span id="cb21-4">                      <span class="at" style="color: #657422;">expected =</span> spelling<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">spell_check_files</span>(<span class="fu" style="color: #4758AB;">list.files</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"../../inst"</span>), <span class="at" style="color: #657422;">ignore =</span> <span class="fu" style="color: #4758AB;">read_lines</span>(<span class="fu" style="color: #4758AB;">list.files</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"../../inst"</span>)))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>── Failure (???): No Typo ──────────────────────────────────────────────────────
spelling::spell_check_files(...) not equal to spelling::spell_check_files(...).
Attributes: &lt; Component "row.names": Numeric: lengths (5, 0) differ &gt;
Component "word": Lengths (5, 0) differ (string compare on first 0)
Component "found": Length mismatch: comparison on first 0 components</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in `reporter$stop_if_needed()`:
! Test failed</code></pre>
</div>
</div>
<p>We can now implement this test into our CICD workflow:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb24-1"><span class="co" style="color: #5E5E5E;">#| eval: false</span></span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Spellcheck</span></span>
<span id="cb24-3"><span class="fu" style="color: #4758AB;">on</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb24-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">pull_request</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">{</span><span class="fu" style="color: #4758AB;">branches</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="st" style="color: #20794D;">'main'</span><span class="kw" style="color: #003B4F;">]}</span></span>
<span id="cb24-5"><span class="fu" style="color: #4758AB;">jobs</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb24-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">Spelling</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb24-7"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">runs-on</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ubuntu-latest</span></span>
<span id="cb24-8"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">container</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">{</span><span class="fu" style="color: #4758AB;">image</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"rocker/tidyverse:4.2.1"</span><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb24-9"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">steps</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb24-10"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> 1 Checkout repo</span></span>
<span id="cb24-11"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">uses</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> actions/checkout@v3</span></span>
<span id="cb24-12"></span>
<span id="cb24-13"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> 2 Install spelling</span></span>
<span id="cb24-14"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">run</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> if (!require("spelling")) install.packages("spelling")</span></span>
<span id="cb24-15"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">shell</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Rscript {0}</span></span>
<span id="cb24-16"></span>
<span id="cb24-17"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> 3 Run Spelling Check test</span></span>
<span id="cb24-18"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">run</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> (check &lt;- spelling::spell_check_files(list.files(pattern = ".*.qmd$", recursive = TRUE), ignore = readr::read_lines("inst/WORDLIST.txt")))</span></span>
<span id="cb24-19"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">shell</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Rscript {0}</span></span>
<span id="cb24-20"><span class="at" style="color: #657422;">        </span></span>
<span id="cb24-21"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> 4 Install testthat</span></span>
<span id="cb24-22"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">run</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> if (!require("testthat")) install.packages("testthat")</span></span>
<span id="cb24-23"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">shell</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Rscript {0}</span></span>
<span id="cb24-24"><span class="at" style="color: #657422;">        </span></span>
<span id="cb24-25"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> 5 Test spellcheck</span></span>
<span id="cb24-26"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">run</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> testthat::test_that(desc = "No Typo", </span></span>
<span id="cb24-27"><span class="at" style="color: #657422;">                    code = testthat::expect_equal(</span></span>
<span id="cb24-28"><span class="at" style="color: #657422;">                      object = check,</span><span class="co" style="color: #5E5E5E;"> # as it was saved in step 3</span></span>
<span id="cb24-29"><span class="at" style="color: #657422;">                      expected = spelling::spell_check_files(path = "inst/WORDLIST.txt", ignore = readr::read_lines("inst/WORDLIST.txt"))))</span></span></code></pre></div>
</section>
<section id="change-language" class="level2">
<h2 class="anchored" data-anchor-id="change-language">Change language</h2>
<p>This works fine for english, but what if we write in german? The <code>spelling</code> package depends on the <code>hunspell</code> package. This package comes with the english dictionary preinstalled. Further, it looks at the user library for any other dictionaries requested in the <code>spelling</code> function call.</p>
<p>We can add dictionaries to the user library in the OS we are using to locally check the spelling in our projects. As soon as we want to spell-check on GitHub (with CICD) it gets a bit more tricky because we need to reference a library file.</p>
<p>…</p>
<!--------------- appendices go here ----------------->


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{thoma2023,
  author = {Stefan Thoma},
  title = {Using {CICD} to Check Spelling in Quarto Documents},
  date = {2023-01-01},
  url = {https://StefanThoma.github.io/quarto-blog//posts/2023-01-09_CICD-spelling},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-thoma2023" class="csl-entry quarto-appendix-citeas">
Stefan Thoma. 2023. <span>“Using CICD to Check Spelling in Quarto
Documents.”</span> January 1, 2023. <a href="https://StefanThoma.github.io/quarto-blog//posts/2023-01-09_CICD-spelling">https://StefanThoma.github.io/quarto-blog//posts/2023-01-09_CICD-spelling</a>.
</div></div></section></div> ]]></description>
  <category>CICD</category>
  <category>R</category>
  <category>GitHub</category>
  <category>Quarto</category>
  <guid>https://StefanThoma.github.io/quarto-blog/posts/2023-01-09_CICD-spelling/index.html</guid>
  <pubDate>Sat, 31 Dec 2022 23:00:00 GMT</pubDate>
  <media:content url="https://StefanThoma.github.io/quarto-blog/posts/2023-01-09_CICD-spelling/CICD.png" medium="image" type="image/png" height="141" width="144"/>
</item>
</channel>
</rss>
