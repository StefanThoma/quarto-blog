---
title: "Using CICD to check spelling in quarto documents"
author:
  - name: Stefan Thoma

description: "This post explains how to use GitHub to automatically check the spelling of your quarto document through the process of continuous integration and deployment (CICD)."
date: "2023-01-01"
categories: [CICD, R, GitHub, Quarto]
image: "CICD.png"
---

<!--------------- my typical setup ----------------->

```{r setup, include=FALSE}
set.seed(8)
long_slug <- "2023-01-09_CICD-spelling"
#renv::use(lockfile = "renv.lock")
wide <- 136
narrow <- 76
options(width = narrow)
```

<!--------------- post begins here ----------------->

As a data scientist or R programmer, you may be familiar with the benefits of version control systems like GitHub for tracking changes to your code base and collaborating with others.
But did you know that you can also use GitHub to automate the testing, building, and deployment of your R projects?
This process, known as continuous integration and deployment (CICD), can save you time and effort by ensuring that your code is always in a deploy-able state and by automatically delivering new updates to your users.
In this blog post, we will show you how to set up CICD for your quarto documents on GitHub, including configuring a build pipeline and integrating a spelling checker.
By the end of this tutorial, you will have a workflow in place that helps you catch spelling mistakes before they make it into your final documents.

## CICD

CICD is often used in GitHub projects for package development where it helps to maintain a certain code-quality and style consistency across different contributors and developers.
For R projects other than packages CICD is used much less frequently.
I belief that setting up CICD pipelines for less complex projects with only very few contributors is still useful to ensure consistent style, spelling, and more.

As I am occasionally involved in creating teaching materials in R using quarto, I wanted to implement some CICD checks for quarto documents.
As most out-of-the-box CICD pipelines are designed for package development, existing pipelines needed some adjustment to work with other R projects.

## Aim

When creating teaching materials in R I rely on GitHub for version control.
Generally, I have a `main`-branch which deploys to a GitHub-page displaying the rendered content.
The development of materials happens on the `devel` branch with a pending merge request to the `main` branch.
Whenever a chapter or a section is ready to be published, I merge the branches.
I wanted to create a pipeline that runs a spell-check on all my quarto files on the merge request with `main`, i.e.: Whenever I push to `devel` I want GitHub to run the CICD pipeline to check my spelling.
As an example, I will show how to implement spelling CICD on this blog-project.

## Spell-check

Because R is all I know, I would like to use an R-package to do the spell-checking.
The `spelling` package is well suited for the task, as it allows to spell-check all files at once.
Before we try to implement the CICD pipeline, the spell-checker has to work locally, so we first install and load the package:

```{r}
#| eval: false
install.packages(spelling)
```

```{r}
library(tidyverse)
library(spelling)
```

If you are working on a package, you can directly use the function `spell_check_package()` and the `spelling` package will do so.
If you are working on any other R project you have to use the `spell_check_files()` function and you have to include a path to the files you want to check.
Let's check just this file:

```{r}
#2023-01-09_CICD-spelling/
spelling::spell_check_files(path = "index.qmd")
```

It looks like there are a few words that spelling did not recognize, mostly file extensions, my last name, and the word *CICD* (which apparently I overuse).
We should carefully look through this list and decide, whether any mistakes were made.
We would not want the GitHub action to prohibit a merge request for any of these words, as there are no typos present (I hope).
Therefore, we want to add these words to a file that include words to be ignored by the `spelling` package.

If you are working on a package, this is easy, you can use the `spelling::update_wordlist()` function.
We simply save the list of words as a *.txt* file.
For now, we save it in the working directory.

```{r}
write(spelling::spell_check_files(path = "index.qmd")[[1]], "wordlist.txt")
```

The file looks like this:

```{r}
read_lines("wordlist.txt")
```

Now we can tell `spelling` to ignore the words in this file from typo-detection:

```{r}
spelling::spell_check_files(path = "index.qmd", 
                            ignore = read_lines("wordlist.txt"))
```

-   link to the package description spelling

```{r}
# we can get all qmd's in a project by 
list.files(path = "../..", # first setting the path to the project
           recursive = TRUE, # include subfolders
           pattern = ".*.qmd$") # include only files ending in .qmd
```

::: callout-note
## path

The structure of this project is such that each blog-post .qmd file is two folders down from the .Rproj file.
The working directory of the .qmd blog-post file is where the file is located.
If I want to list files or save files in a higher order folder I need to adjust my path to first go two folders up.
I do this by adding `"../.."` to my file paths.

The working directory of the CICD pipeline is by default on project level, therefore, the `"../.."` is not required.
:::

```{r}
wordlist <- list.files(path = "../..", 
                       recursive = TRUE, 
                       full.names = TRUE,
                       pattern = ".*.qmd$") %>% 
  spelling::spell_check_files()
```

This can now be saved into a project level WORDLIST_EXAMPLE file to be accessed later by our CICD workflow.

```{r}
#| eval: false
write(x = wordlist[[1]], file =   "../../inst/WORDLIST_EXAMPLE.txt")
```

Check again with WORDLIST_EXAMPLE:

```{r}
list.files(path = "../..", 
                       recursive = TRUE, 
                       full.names = TRUE,
                       pattern = ".*.qmd$") %>% 
  spelling::spell_check_files(ignore = read_lines("../../inst/WORDLIST_EXAMPLE.txt"))
```

Looks like it worked --- great!

## Setup

Now this needs to be implemented in the CICD pipeline.
To implement GitHub CICD I create a folder `.github` in the project directory, and the folder `workflows` within the `.github` folder.
This is where CICD pipelines are stored.

CICD pipelines written in `yaml` format, it should look like this:

``` yaml
#| eval: false
name: Spellcheck
on:
  pull_request: {branches: ['main']}
jobs:
  Spelling:
    runs-on: ubuntu-latest
    container: {image: "rocker/tidyverse:4.2.1"}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install spelling
        run: if (!require("spelling")) install.packages("spelling")
        shell: Rscript {0}

      - name: Run Spelling Check test
        run: spelling::spell_check_files(list.files(pattern = ".*.qmd$", recursive = TRUE), ignore = readr::read_lines("inst/WORDLIST_EXAMPLE.txt"))
        shell: Rscript {0}
```

The first few lines define the name of the workflow (`Spellcheck`) and when it should be executed.\

In this case, the action runs on pull requests to the `main` branch.

``` yaml
#| eval: false
name: Spellcheck
on:
  pull_request: {branches: ['main']}
```

Then, we define the job to run:

``` yaml
jobs:
  Spelling:
    runs-on: ubuntu-latest
    container: {image: "rocker/tidyverse:4.2.1"}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install spelling
        run: if (!require("spelling")) install.packages("spelling")
        shell: Rscript {0}

      - name: Run Spelling Check test
        run: spelling::spell_check_files(list.files(pattern = ".*.qmd$", recursive = TRUE), ignore = readr::read_lines("inst/WORDLIST_EXAMPLE.txt"))
        shell: Rscript {0}
        
```

We run just one job called `Spelling`.

It is run on a [docker image](https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/) deployed by GitHub.
We use a particular docker image that comes with R and tidyverse preinstalled, this eases the use of R in this image.

The actual workflow is defined in the `steps` (which can be named) --- here we only have three steps.

-   `actions/checkout@v3` loads the GitHub repository so the subsequent steps can reference the repo.

-   Next, the *Install spelling* step installs the R package `spelling`.
    This is written in R code, so we need to specify that we run the command in R.
    We do this with the instruction `shell: Rscript {0}`.

-   At last, we run the spell check in R.
    By default, the code is executed in the project level directory, so we do not need to adjust the path in the `list.files()` function to go up the project directory.
    The same goes for the `Ã¬nst/WORDLIST_EXAMPLE` file.

Now while this works, it will not throw an error if typos are spotted.
We can remedy this by writing code that throws an error if there is a typo:

```{r}
#| error: true
testthat::test_that(desc = "No Typo", 
                    code = testthat::expect_equal(
                      object = spelling::spell_check_files(path = list.files(path = "../..", pattern = ".*.qmd$", 
                                                                             recursive = TRUE, full.names = TRUE), 
                                                           ignore = readr::read_lines("../../inst/WORDLIST_EXAMPLE.txt")
                                                           ),
                      expected = spelling::spell_check_files(path =  "../../inst/WORDLIST_EXAMPLE.txt",
                                                              ignore = readr::read_lines("../../inst/WORDLIST_EXAMPLE.txt")
                                                             )
                      )
                    )
```

We can now implement this test into our CICD workflow:

``` yaml
name: Spellcheck
on:
  pull_request: {branches: ['main']}
jobs:
  Spelling:
    runs-on: ubuntu-latest
    container: {image: "rocker/tidyverse:4.2.1"}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install spelling
        run: if (!require("spelling")) install.packages("spelling")
        shell: Rscript {0}

      - name: Run Spelling Check test
        run: spelling::spell_check_files(list.files(pattern = ".*.qmd$", recursive = TRUE), ignore = readr::read_lines("inst/WORDLIST_EXAMPLE.txt"))
        shell: Rscript {0}

      - name: Install testthat
        run: if (!require("testthat")) install.packages("testthat")
        shell: Rscript {0}

      - name: test typos
        run: testthat::test_that(desc = "No Typo", code = testthat::expect_equal(object = spelling::spell_check_files(list.files(pattern = ".*.qmd$", recursive = TRUE), ignore = readr::read_lines("inst/WORDLIST_EXAMPLE.txt")), expected = spelling::spell_check_files(path = "inst/WORDLIST_EXAMPLE.txt", ignore = readr::read_lines("inst/WORDLIST_EXAMPLE.txt"))))
        shell: Rscript {0}
```

### append wordlist

## Change language

This works fine for English, but what if we write in German?
The `spelling` package depends on the `hunspell` package.
This package comes with the English dictionary pre-installed.
Further, it looks at the user library for any other dictionaries requested in the `spelling` function call.

We can add dictionaries to the user library in the OS we are using to locally check the spelling in our projects.
As soon as we want to spell-check on GitHub (with CICD) it gets a bit more tricky because we need to reference a library file within the CICD workflow.

Let's write a file that contains a German quote (by *JW von Goethe*).

```{r}
#zitat <- file("Zitat.txt", encoding = "UTF-8")
#write(x = "Es hÃ¶rt doch jeder nur, was er verowokjnsthet.", file = "Zitat.txt")
write_lines("Es hÃ¶rt doch jeder nur, was er verowokjnsthet.", file = "Zitat.txt")
```

The `spelling` package does not recognize the language in a file:

```{r}
spelling::spell_check_files("Zitat.txt")
```

We can list the dictionaries that are currently available to the hunspell package.

```{r}
hunspell::list_dictionaries()
```

Apparently, only English dictionaries are available at the moment.
You can download dictionaries from the [LibreOffice GitHub repo](https://github.com/LibreOffice/dictionaries).
For me, the easiest way was to download the entire repo as a `.zip` folder and then move the dictionary files manually into the repo in which you want to spell-check using that dictionary.

`hunspell` requires two dictionary files for a language: the `.dic` and the `.aff` file.
In this example we take the German dictionary files `de_DE_frami.aff` and `de_DE_frami.dic` and save them in the `inst` folder where our `WORDLIST_EXAMPLE.txt` file is as well.
I am not sure why, but sometimes `hunspell` will look for the file `de_CH_FRAMI.dic` when we specify `lang = "inst/de_CH_frami"` so make sure to rename the `.dic` and `.aff` files as `de_DE_FRAMI.aff` and `de_DE_FRAMI.dic`, just to be sure.

```{r}
list.files("../../inst")
```

```{r}
spelling::spell_check_files("Zitat.txt", lang = "../../inst/de_CH_frami")
```
On the first try I got an encoding error, but after restarting RStudio this worked well. 

Think about whether to link to the utf-8 github repo of the dictionaries: https://github.com/JetBrains/hunspell-dictionaries

...

<!--------------- appendices go here ----------------->
