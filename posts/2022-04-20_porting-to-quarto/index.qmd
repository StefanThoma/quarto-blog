---
# title and subtitle
title: "Porting a distill blog to quarto"
subtitle: | 
  I have moved this blog from distill over to quarto, and 
  taken notes. A year after starting the blog, this promises 
  to be an interesting reproducibility test

# other metadata
date: "2022-04-20"
categories: [Quarto, Blogging, Reproducibility]
image: "img/anete-lusina-zwsHjakE_iI-unsplash.jpg"
citation:
   url: "https://blog.djnavarro.net/porting-to-quarto"
---

<!-- cover image: Anete Lūsiņa -->
<!-- https://unsplash.com/photos/zwsHjakE_iI -->

<!--------------- my typical setup ----------------->

```{r setup, include=FALSE}
long_slug <- "2022-04-20_porting-to-quarto"
renv::use(lockfile = "renv.lock")
```

<!--------------- post begins here ----------------->



## Get started

The very first thing I did was go read Alison Hill's wonderful [We don't talk about quarto](https://www.apreshill.com/blog/2022-04-we-dont-talk-about-quarto/) blog post. If you're an R markdown user considering making the jump to quarto and haven't already read her summary of where things are at, you won't regret it. It's a nice high level overview. Having read through it, I went to the [get started page](https://quarto.org/docs/get-started/) on the quarto website to download the installer file. I'm on Ubuntu, so for me that's a .deb file. I install it in the usual way from the command line:

``` bash
sudo dpkg -i quarto-0.9.282-linux-amd64.deb
```

Now that I have quarto installed, I can use it to create a blog. My old [distill](https://rstudio.github.io/distill/) blog existed in a project folder that I'd imaginatively named `distill-blog`, so I'm going to keep to tradition and create the quarto version in an equally boring project folder called `quarto-blog`. There is a  page on the quarto website that walks you through the process for [creating a blog](https://quarto.org/docs/websites/website-blog.html), which I dutifully follow. From the terminal, I use the `quarto create-project` command:

``` bash 
quarto create-project quarto-blog --type website:blog
```
```
Creating project at /home/danielle/GitHub/sites/quarto-blog:
  - Created _quarto.yml
  - Created index.qmd
  - Created posts/welcome/index.qmd
  - Created posts/post-with-code/index.qmd
  - Created about.qmd
  - Created styles.css
  - Created posts/_metadata.yml
```

Coming from an R markdown background, this is very familiar: 

- The files with a `.qmd` extension are the quarto markdown documents. These contain source code for the blog posts (the two files in the `posts` folder), the home page (the `index.qmd` file in the project root folder) and a standalone "about me" page for the blog (the `about.qmd` file). 
- The files with a `.yml` extension are the YAML files used to configure the blog. I didn't notice this at first, but the fact that there are two of them is important. The `_quarto.yml` file is used for setting that will apply across the entire site, but you will often want to configure settings that only apply to your blog posts. Those can be set by editing the `posts/_metadata.yml` file.
- The `styles.css` file can be used to specify custom CSS rules that will apply to the whole site. I'll talk more about styles later.


## Rendering posts

There are several different ways to interact with quarto. For example, [later in the post](#quarto-cli) I'll talk about the quarto command line interface which allows you to work with quarto without going through R or RStudio. However, when getting started I tried to keep things simple, and went with the option that was most familiar to me: I used RStudio. 

To do this, it's convenient to have an RStudio project for my blog. Using the RStudio file menu, I create a new project from an existing directory (i.e., my `quarto-blog` folder), which creates a `quarto-blog.Rproj` file and other infrastructure needed to work with my new quarto blog as an RStudio project. Once that's done, I can open up a quarto file in the RStudio editor and I see a familiar looking interface. 

```{r}
#| echo: false
#| fig-align: center
#| fig-cap-location: margin
#| fig-cap: A blog post written in quarto markdown open in the RStudio editor. Notice that in the place where one would normally expect to see the 'Knit' button for an R markdown document, there is a 'Render' button. It serves the same function and is mapped to the same hot keys as the 'Knit' button
knitr::include_graphics("img/welcome_post.png")
```

I can click on the "Render" button to render a single page, or alternatively I can go to the RStudio build pane and select the "Render Project" option to build the entire site. By default, the blog builds into the `_site` folder, so if you open up `_site/index.html` in a web browser, you can browse the static site easily enough. 


## Tinker 


First observations:

- feel is like distill, not blogdown: it doesn't use hugo so it is simpler
- the look of the site is different to distill: uses bootstrap, like simple R markdown websites
- overall seems like a lot of good features from the three systems have made it across

Customise:

- Tinker with _quarto.yml file: edit blog title, twitter, github and bootswatch theme.
- I don't like the font but I'll fix it in CSS later

New post:

- Create new folder `_posts/2022-04-20_porting-to-quarto` and file `index.qmd`
- Add basic yml metadata
- Start writing this post, and build!


Can I add footnotes?^[Yes] Can they be nested?^[No, but they can be recursive^[here]]

Can I add asides?

:::{.column-margin}
Also yes
:::

I used to use the `<aside>` html tag for this but now:

see also https://quarto.org/docs/authoring/article-layout.html

``` default
:::{.column-margin}
Also yes
:::
```

## Notes on YAML headers

The YAML headers used for blog posts are a little different in quarto than their equivalents in distill were, and it takes me a little bit of thought to decide how I want to adapt the YAML headers from my old R markdown posts for the new quarto blog. Here's where I landed. First, some fields require almost no changes:

- The `title` field is unchanged. That was an easier one!
- The `date` field is essentially unchanged, except for the fact there seems to be a tiny bug in date parsing for blogs that I'm sure will vanish soon. If you're using ISO-8601 date formats like `date: "2022-04-20"` it will be fine.^[In case you're interested: the "Welcome to My Blog" post in the starter blog lists the date as `date: "20/04/2022"`, which gets parsed as a string literal when the post gets built (i.e., the post date shows up as "20/04/2022"), sensibly enough. However, when you build the entire site it renders as "May 4, 2023".]
- The `categories` field takes a list of values, which (I think?) is no different to what it looked like before. To be honest I don't remember because my old blog didn't use them. I've started now. 

Other changes are superficial:

- The `description` field that I used on my old blog still does what it used to: it provides preview text on the listing page, and a summary at the top of the file. However, there is also a `subtitle` field that you can use for this purpose, and the output has the same look and field as my old descriptions, so I switched all my old description fields to `subtitle` entries.
- To specify a preview image associated with a blog post, use the `image` field (e.g., something like `image: thumbnail.jpg`) instead of the `preview` field from distill. 
- There is a new `license` field that replaces the `creative_commons` field from distill. At the bottom of this post you'll see a "Reuse" appendix that links to a license file. To generate this, I've included a `license: "CC BY"` line in the YAML. 

Other changes are a little deeper:

- In distill it is possible to specify the `author` field in a lot of detail, mirroring the academic convention of listing an authors affiliation alongside their employer, orcid record, and contact details. That doesn't appear to be an option in quarto blogs, which doesn't bother me very much. I simplified my author field to `author: "Danielle Navarro"` throughout the blog, and I don't think I've lost anything important.
- Specifying the table of contents is slightly different. Just like in distill, you can turn on the table of contents by including `toc: true` as a line in the YAML header, and set the `toc-depth` field to determine how detailed the table of contents should be. But there are new options. You can customise the text that appears above the table of contents, and the location in which it appears. I've been boring and gone with some standard options: `toc-title: Table of contents` and `toc-location: left`. 
- One feature in distill that I like is that it generates a citation for each post. You can do that in quarto too, and you'll see at the bottom of this post that I've used that feature here. However, quarto manages this in a different way to distill, and uses a YAML version of [citation style language](https://citationstyles.org/) (CSL) formatting to define the citation. To see how it works, you can read through the [quarto page on citations](https://quarto.org/docs/reference/metadata/citation.html). It's a little more elaborate than the distill version, but much more flexible. For this post, the corresponding lines of YAML would look like this:

    ``` default
    citation:
      type: "article-journal"
      container-title: "Notes from a Data Witch"
      url: "https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto"
    ```

    The title, date, and author information are inherited by the citation.  
    
## Creating a new post

Time to get to work at transforming the starter blog into a quarto version of my distill blog. My first step is to delete the two posts that came with the starter blog, and then create this one. A folder with an `index.qmd` file is the bare minimum you need to get started with a new post.

I suppose there are other ways do to this but what I actually did at the time was create the the folder and an empty file, and then started editing. I was working at the terminal at the time (for reasons known but to god) so these were the commands I used:

``` bash
mkdir posts/2022-04-20_porting-to-quarto
touch posts/2022-04-20_porting-to-quarto/index.qmd
```

To be honest this is overkill. What I could have done instead, had I been looking at RStudio rather than the terminal, is use the "New File" option in the file menu and then select the "Quarto Doc" option. That creates a new untitled quarto document that you can save to the appropriate location. 

## Inheriting YAML settings

A handy feature in quarto is that YAML fields are inherited. This post has its own header that contains the following -- and only the following -- fields:

``` default
# Title and subtitle
title: "Porting a distill blog to quarto"
subtitle: | 
  I have moved this blog from distill over to quarto, and 
  taken notes. A year after starting the blog, this promises 
  to be an interesting reproducibility test

# Other metadata
date: "2022-04-20"
categories: [Quarto, Blogging, Reproducibility]
image: "img/anete-lusina-zwsHjakE_iI-unsplash.jpg"
citation:
   url: "https://blog.djnavarro.net/porting-to-quarto"
```

That's a little peculiar, because a lot of the metadata needed to specify this post is missing. The reason for that is that I've placed fields that don't vary across posts in the `posts/_metadata.yml` file. Those fields are inherited by every blog post. This is the entire contents of my post metadata file:

``` default
# Freeze computed outputs
freeze: true

# Enable banner style title blocks
title-block-banner: true

# Enable CC licence appendix
license: "CC BY"

# Default for table of contents
toc: true
toc-title: Table of contents
toc-location: left

# Default knitr options
execute:
  echo: true
  message: true
  warning: true

# Default author
author: "Danielle Navarro"

# Default fields for citation
citation:
   type: "article-journal"
   container-title: "Notes from a Data Witch"
```

That explains a lot, but if you're looking closely you'll realise that there's nothing in these fields specifying the output format! In R markown I'd have had an `output` field that specified this, but in quarto the relevant field is called `format`. Because the output applies to the entire site (all pages, not just the blog posts), that part of the YAML header is in the `_quarto.yml` file. The relevant lines of that file are:

``` default
format:
  html:
    theme: ember.scss
    css: styles.css
```

I'll come back to this later. For now it's enough to recognise that this indicates that all pages on this site should be rendered to HTML documents, and using the `ember.scss` and `styles.css` files specify the blog style.

## Converting my old posts


Okay, delete the two posts that came with the starter blog, let's try to import my own! Copy and paste my "welcome" post, rename the .Rmd to .qmd... how much work do I need to do? Not too much. I've made a decision to simplify my reproducibility workflow, so that instead of using `refinery` I've reverted to calling `renv::use()` within the post, and keeping the lock file within the individual post folder. That required a bit of tinkering, but that's hyper-specific to my blog and not actually very much work anyway. Overall this is the most time consuming step: I had to go through all my old posts, make a few minor changes to each one, check that it rendered okay, and so on. Even so, I was able to get through it in an afternoon.

## Styling the new blog

Next step: let's get some style I actually like.

- Okay I'm just going to start from litera because I like the colour scheme and then modify the SASS until I'm happy https://github.com/quarto-dev/quarto-cli/blob/main/src/resources/formats/html/bootstrap/themes/litera.scss
- Details on what they've done with SASS: https://quarto.org/docs/output-formats/html-themes-more.html

Let's try to define my own page layout for blog posts? https://quarto.org/docs/output-formats/page-layout.html

## Deploy through Netlify




## The quarto CLI {#quarto-cli}

In a moment I'm going to switch to working from RStudio -- because I like working in RStudio and rarely see the advantage of working in the terminal just for the sake of it -- but for the moment I hold off because I want to get a feel for the concept of quarto as a standalone install. At the terminal I can see that I have some help options:

```{bash, eval=FALSE}
quarto help
```

```
  Usage:   quarto 
  Version: 0.9.282
                  

  Description:

    Quarto CLI

  Options:

    -h, --help     - Show this help.                            
    -V, --version  - Show the version number for this program.  

  Commands:

    render          [input] [args...]  - Render input file(s) to various document types.                                                
    serve           [input]            - Serve an interactive document.                                                                 
    create-project  [dir]              - Create a project for rendering multiple documents                                              
    preview         [file] [args...]   - Render and preview a Quarto document or website project. Automatically reloads the browser when
    convert         [input]            - Convert documents to alternate representations.                                                
    capabilities                       - Query for current capabilities (output formats, engines, kernels etc.)                         
    check           [target]           - Check and verify correct functioning of Quarto installation and computation engines.           
    inspect         [path]             - Inspect a Quarto project or input path. Inspecting a project returns its config and engines.   
    tools           [command] [tool]   - Manage the installation, update, and uninstallation of useful tools.                           
    help            [command]          - Show this help or the help of a sub-command.
    
```

From there I can check the help documentation for the `quarto render` command by typing the following,

```{bash, eval=FALSE}
quarto render help
```

and so on. Browsing this documentation in addition to all the excellent content on the quarto website is a useful way of finding additional options. If I wanted to render the current post, and my terminal was currently at the project root folder (i.e., my `quarto-blog` folder), I can render it as follows:

```{bash, eval=FALSE}
quarto render posts/2022-04-20_porting-to-quarto/index.qmd
```



<!--------------- appendices go here ----------------->

```{r, echo=FALSE}
source("appendix.R")
insert_appendix(
  repo_spec = "djnavarro/quarto-blog", 
  name = long_slug
)
```



