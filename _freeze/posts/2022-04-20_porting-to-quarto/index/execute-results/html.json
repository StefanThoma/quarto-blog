{
  "hash": "987d4127ec89e80a4a658e7e2c734ad7",
  "result": {
    "markdown": "---\n# title and subtitle\ntitle: \"Porting my distill blog to quarto\"\nsubtitle: | \n  I have moved this blog from distill over to quarto, and \n  taken notes. A year after starting the blog, this promises \n  to be an interesting reproducibility test\n\n# other metadata\ndate: \"2022-04-20\"\ncategories: [Quarto, Blogging, Reproducibility]\nimage: \"img/anete-lusina-zwsHjakE_iI-unsplash.jpg\"\ncitation:\n   url: \"https://blog.djnavarro.net/porting-to-quarto\"\n---\n\n<!-- cover image: Anete Lūsiņa -->\n<!-- https://unsplash.com/photos/zwsHjakE_iI -->\n\n<!--------------- my typical setup ----------------->\n\n\n\n<!--------------- post begins here ----------------->\n\n\n\n## Getting started\n\nThe very first thing I did was go read Alison Hill's wonderful [We don't talk about quarto](https://www.apreshill.com/blog/2022-04-we-dont-talk-about-quarto/) blog post. If you're an R markdown user considering making the jump to quarto and haven't already read her summary of where things are at, you won't regret it. It's a nice high level overview. I'd also suggest [Nick Tierney's notes](https://www.njtierney.com/post/2022/04/11/rmd-to-qmd/) on making the switch, which I found very helpful also. \n\nHaving done some background reading, I went to the [get started page](https://quarto.org/docs/get-started/) on the quarto website to download the installer file. I'm on Ubuntu, so for me that's a `.deb` file. I install it in the usual way from the command line:\n\n``` bash\nsudo dpkg -i quarto-0.9.282-linux-amd64.deb\n```\n\nNow that I have quarto installed, I can use it to create a blog. My old [distill](https://rstudio.github.io/distill/) blog existed in a project folder that I'd imaginatively named `distill-blog`, so I'm going to keep to tradition and create the quarto version in an equally boring project folder called `quarto-blog`. There is a  page on the quarto website that walks you through the process for [creating a blog](https://quarto.org/docs/websites/website-blog.html), which I dutifully follow. From the terminal, I use the `quarto create-project` command:\n\n``` bash \nquarto create-project quarto-blog --type website:blog\n```\n```\nCreating project at /home/danielle/GitHub/sites/quarto-blog:\n  - Created _quarto.yml\n  - Created index.qmd\n  - Created posts/welcome/index.qmd\n  - Created posts/post-with-code/index.qmd\n  - Created about.qmd\n  - Created styles.css\n  - Created posts/_metadata.yml\n```\n\nComing from an R markdown background, this is very familiar: \n\n- The files with a `.qmd` extension are the quarto markdown documents. These contain source code for the blog posts (the two files in the `posts` folder), the home page (the `index.qmd` file in the project root folder) and a standalone \"about me\" page for the blog (the `about.qmd` file). \n- The files with a `.yml` extension are the YAML files used to configure the blog. I didn't notice this at first, but the fact that there are two of them is important. The `_quarto.yml` file is used for settings that will apply across the entire site, but you will often want to configure settings that only apply to your blog posts. Those can be set by editing the `posts/_metadata.yml` file.\n- The `styles.css` file can be used to specify custom CSS rules that will apply to the whole site. I'll talk more about styles later.\n\n\n## Rendering posts\n\nThere are several different ways to interact with quarto. For example, [later in the post](#quarto-cli) I'll talk about the quarto command line interface which allows you to work with quarto without going through R or RStudio. However, when getting started I tried to keep things simple, and went with the option that was most familiar to me: I used RStudio. \n\nTo do this, it's convenient to have an RStudio project for my blog. Using the RStudio file menu, I create a new project from an existing directory (i.e., my `quarto-blog` folder), which creates a `quarto-blog.Rproj` file and other infrastructure needed to work with my new quarto blog as an RStudio project. Once that's done, I can open up a quarto file in the RStudio editor and I see a familiar looking interface. \n\n::: {.cell .fig-cap-location-margin layout-align=\"center\"}\n::: {.cell-output-display}\n![A blog post written in quarto markdown open in the RStudio editor. Notice that in the place where one would normally expect to see the 'Knit' button for an R markdown document, there is a 'Render' button. It serves the same function and is mapped to the same hot keys as the 'Knit' button](img/welcome_post.png){fig-align='center' width=805}\n:::\n:::\n\nI can click on the \"Render\" button to render a single page, or alternatively I can go to the RStudio build pane and select the \"Render Project\" option to build the entire site. By default, the blog builds into the `_site` folder, so if you open up `_site/index.html` in a web browser, you can browse the static site easily enough. \n\n\n## Playing around \n\nBefore trying to do anything practical, I have some very important business to attend to: playing around. Aimlessly exploring the functionality of any new tool is always fun, and I find it's generally a useful way to familiarise myself with something. I'm pretty familiar with R markdown already, and I imagine most readers of this post would be too, so for the most part there are no surprises. Still it is worth asking myself the usual questions: \n\n- Can I add footnotes?^[Yes] \n- Can they be nested?^[No, but they can be recursive^[here]]\n- Can I add comments in the margin?\n\n:::{.column-margin}\nA comment in the margin\n:::\n\nLooking at the [quarto article layout documentation](https://quarto.org/docs/authoring/article-layout.html) uncovers some nice features. You can use the `:::{.class}` notation to apply a CSS class to a section of output, like this:\n\n``` default\n:::{.column-margin}\nA comment in the margin\n:::\n```\n\nThe `.column-margin` class is handy for margin asides, but there are several other useful classes that come in handy when adding images to blog posts:\n\n- `.column-body` spans the usual body width of the post\n- `.column-body-outset` extends slightly outside the usual width\n- `.column-page` spans the whole page (including both margins)\n- `.column-screen` class spans the full width of the screen \n- `.column-screen-inset` class stops just short of the full screen width\n\nYou can set these inside a chunk option. For example, setting `column: margin` as a chunk option will assign the output a `.column-margin` class, and any resulting figure will appear in the margin rather than below the code. Similarly, setting `column: screen` as the chunk option will assign the output a `.column-screen` class, and the output will span the full width. Here's a simple example based pretty closely on the one used in the quarto documentation:\n\n::: {.cell .column-screen}\n\n```{.r .cell-code}\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%\n  addMarkers(\n    lng=151.22251, \n    lat=-33.85943, \n    label=\"Mrs Macquarie's Chair\"\n  ) %>% \n  addProviderTiles(providers$CartoDB.Positron)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-ea76c08500972fab0c42\" style=\"width:100%;height:464px;\" class=\"leaflet html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-ea76c08500972fab0c42\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[-33.85943,151.22251,null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},null,null,null,null,\"Mrs Macquarie's Chair\",{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB.Positron\",null,null,{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]}],\"limits\":{\"lat\":[-33.85943,-33.85943],\"lng\":[151.22251,151.22251]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n<br>\n\nI confess. I'm a little bit in love.\n\n\n## Notes on YAML headers\n\nThe YAML headers used for blog posts are a little different in quarto than their equivalents in distill were, and it takes me a little bit of thought to decide how I want to adapt the YAML headers from my old R markdown posts for the new quarto blog. Here's where I landed. First, some fields require almost no changes:\n\n- The `title` field is unchanged. That was an easier one!\n- The `date` field is essentially unchanged, except for the fact there seems to be a tiny bug in date parsing for blogs that I'm sure will vanish soon. If you're using ISO-8601 date formats like `date: \"2022-04-20\"` it will be fine.^[In case you're interested: the \"Welcome to My Blog\" post in the starter blog lists the date as `date: \"20/04/2022\"`, which gets parsed as a string literal when the post gets built (i.e., the post date shows up as \"20/04/2022\"), sensibly enough. However, when you build the entire site it renders as \"May 4, 2023\".]\n- The `categories` field takes a list of values, which (I think?) is no different to what it looked like before. To be honest I don't remember because my old blog didn't use them. I've started now. \n\nOther changes are superficial:\n\n- The `description` field that I used on my old blog still does what it used to: it provides preview text on the listing page, and a summary at the top of the file. However, there is also a `subtitle` field that you can use for this purpose, and the output has the same look and field as my old descriptions, so I switched all my old description fields to `subtitle` entries.\n- To specify a preview image associated with a blog post, use the `image` field (e.g., something like `image: thumbnail.jpg`) instead of the `preview` field from distill. \n- There is a new `license` field that replaces the `creative_commons` field from distill. At the bottom of this post you'll see a \"Reuse\" appendix that links to a license file. To generate this, I've included a `license: \"CC BY\"` line in the YAML. \n\nOther changes are a little deeper:\n\n- In distill it is possible to specify the `author` field in a lot of detail, mirroring the academic convention of listing an authors affiliation alongside their employer, orcid record, and contact details. Quarto supports this also, though the tags have changed slightly: `orcid_id` is now `orcid`, for example. There's an example of this shown a little later in the post.\n- Specifying the table of contents is slightly different. Just like in distill, you can turn on the table of contents by including `toc: true` as a line in the YAML header, and set the `toc-depth` field to determine how detailed the table of contents should be. But there are new options. You can customise the text that appears above the table of contents, and the location in which it appears. I've been boring and gone with some standard options: `toc-title: Table of contents` and `toc-location: left`. \n- One feature in distill that I like is that it generates a citation for each post. You can do that in quarto too, and you'll see at the bottom of this post that I've used that feature here. However, quarto manages this in a different way to distill, and uses a YAML version of [citation style language](https://citationstyles.org/) (CSL) formatting to define the citation. To see how it works, you can read through the [quarto page on citations](https://quarto.org/docs/reference/metadata/citation.html). It's a little more elaborate than the distill version, but much more flexible. For this post, the corresponding lines of YAML would look like this:\n\n    ``` yaml\n    citation:\n      type: \"article-journal\"\n      container-title: \"Notes from a Data Witch\"\n      url: \"https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto\"\n    ```\n\n    The title, date, and author information are inherited by the citation.  \n    \n## Creating a new post\n\nTime to get to work at transforming the starter blog into a quarto version of my distill blog. My first step is to delete the two posts that came with the starter blog, and then create this one. A folder with an `index.qmd` file is the bare minimum you need to get started with a new post.\n\nI suppose there are other ways do to this but what I actually did at the time was create the the folder and an empty file, and then started editing. I was working at the terminal at the time (for reasons known but to god) so these were the commands I used:\n\n``` bash\nmkdir posts/2022-04-20_porting-to-quarto\ntouch posts/2022-04-20_porting-to-quarto/index.qmd\n```\n\nTo be honest this is overkill. What I could have done instead, had I been looking at RStudio rather than the terminal, is use the \"New File\" option in the file menu and then select the \"Quarto Doc\" option. That creates a new untitled quarto document that you can save to the appropriate location. \n\n## Inheriting YAML settings\n\nA handy feature in quarto is that YAML fields are inherited. This post has its own header that contains the following -- and only the following -- fields:\n\n``` yaml\n# Title and subtitle\ntitle: \"Porting a distill blog to quarto\"\nsubtitle: | \n  I have moved this blog from distill over to quarto, and \n  taken notes. A year after starting the blog, this promises \n  to be an interesting reproducibility test\n\n# Other metadata\ndate: \"2022-04-20\"\ncategories: [Quarto, Blogging, Reproducibility]\nimage: \"img/anete-lusina-zwsHjakE_iI-unsplash.jpg\"\ncitation:\n   url: \"https://blog.djnavarro.net/porting-to-quarto\"\n```\n\nThat's a little peculiar, because a lot of the metadata needed to specify this post is missing. The reason for that is that I've placed fields that don't vary across posts in the `posts/_metadata.yml` file. Those fields are inherited by every blog post. This is the entire contents of my post metadata file:\n\n``` yaml\n# Freeze computed outputs\nfreeze: true\n\n# Enable banner style title blocks\ntitle-block-banner: true\n\n# Enable CC licence appendix\nlicense: \"CC BY\"\n\n# Default for table of contents\ntoc: true\ntoc-title: Table of contents\ntoc-location: left\n\n# Default knitr options\nexecute:\n  echo: true\n  message: true\n  warning: true\n\n# Default author\nauthor:\n  - name: Danielle Navarro\n    url: https://djnavarro.net\n    affiliation: Voltron Data\n    affiliation-url: https://voltrondata.com\n    orcid: 0000-0001-7648-6578\n\n# Default fields for citation\ncitation:\n   type: \"article-journal\"\n   container-title: \"Notes from a Data Witch\"\n```\n\nThat explains a lot, but if you're looking closely you'll realise that there's nothing in these fields specifying the output format! In R markdown I'd have had an `output` field that specified this, but in quarto the relevant field is called `format`. Because the output applies to the entire site (all pages, not just the blog posts), that part of the YAML header is in the `_quarto.yml` file. The relevant lines of that file are:\n\n``` yaml\nformat:\n  html:\n    theme: ember.scss\n    css: styles.css\n```\n\nI'll come back to this later. For now it's enough to recognise that this indicates that all pages on this site should be rendered to HTML documents, and using the `ember.scss` and `styles.css` files specify the blog style.\n\n## Converting my old posts\n\nThe time has come for a little manual labour. Although quarto is compatible with most existing R markdown and I could probably get away with leaving them untouched, in the longer term I'm expecting that I'll be moving across languages so it appeals to me to take this opportunity to port everything over to quarto now. Renaming all the `index.Rmd` files to `index.Rmd` files is easy enough, and can be done programmatically, but most of my edits required a small amount of manual tinkering with each post. Not a lot, because it was mostly a matter of renaming a few YAML fields, but it would probably have been a little bit of effort to try to automate the whole process. Given that there are only 20 or so posts that need to be ported, I decided it was easier to do it manually than to try to write a script to automate the task. I was able to get through it in an afternoon.\n\n## Styling the new blog\n\nUp to this point, the adoption of quarto has felt very \"distill-like\". The structure of the blog feels familiar from distill, the YAML headers are similar in spirit (if different in the particulars), and so on. When it comes to customising the appearance of the blog, it's not very similar to distill at all, and feels more similar to simple R markdown sites. Quarto websites are bootstrap based, and as discussed on the [quarto theming page](https://quarto.org/docs/output-formats/html-themes.html), they come with the same bootswatch themes that you might be familiar with from R markdown. For example, if you decide like I did that you would like a very plain white theme, you could choose the \"litera\" theme. To apply this to your blog, all you'd have to do is make sure your `_quarto.yml` file contains the following lines:\n\n``` yaml\nformat:\n  html:\n    theme: litera\n    css: styles.css\n```\n\nWhat this does is assert that output will be rendered as HTML objects using the litera bootswatch theme, and applying any custom CSS rules that you add in the `styles.css` file. \n\nOne very nice feature of quarto, if you're comfortable using SASS to define styles and know something about how the bootstrap SASS files are organised,^[Which, frankly I do not, but I am also foolish and will try things anyway] is that it allows you to write your own `.scss` file to define your blog theme more precisely, giving you access to bootstrap parameters and so on. I would strongly recommend reading about the [quarto theming system](https://quarto.org/docs/output-formats/html-themes-more.html) before tinkering with this aspect yourself, but if you are more knowledgeable (or more foolish) than I, here's how I set my blog up. First, instead of referring to the litera theme, the YAML in my `_quarto.yml` file points at my own custom `.scss` file:\n\n``` yaml\nformat:\n  html:\n    theme: ember.scss\n    css: styles.css\n```\n\nThe contents of the `ember.scss` file are as follows:\n\n``` scss\n/*-- scss:defaults --*/\n\n// use litera as the base\n$theme: \"litera\" !default;\n\n// import google fonts\n@import 'https://fonts.googleapis.com/css2?family=Atkinson+Hyperlegible:ital,wght@0,400;0,700;1,400;1,700&display=swap';\n@import 'https://fonts.googleapis.com/css2?family=Fira+Code:wght@300;400;500;600;700&display=swap';\n\n// use Atkinson Hyperlegible font if available\n$font-family-sans-serif:  \"Atkinson Hyperlegible\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\" !default;\n\n/*-- scss:rules --*/\n\n// litera is serif by default: revert to san-serif\np {\n  font-family: $font-family-sans-serif;\n}\n```\n\nAs you can see, right now my customisation really doesn't do much other than make some very minor tweaks on the litera theme, but the potential is there to do so much more than I have in setting up this blog. I plan to tinker with this more later on!\n\n## Adding an RSS feed\n\nMy old distill blog had an RSS feed, and while I acknowledge that it's increasingly an esoteric feature that most folks don't use, I have a fondness for RSS. Quarto supports this, but it's not enabled by default. What you need to do is edit the YAML in the `index.qmd` file that corresponds to your homepage, because that's generally where you have your primary listing of posts. In it, you'll see a `listing` field. All you need to do is add `feed: true` underneath and there will now be an RSS feed for your site:\n\n``` yaml\ntitle: \"Notes from a data witch\"\nsubtitle: A data science blog by Danielle Navarro\nlisting:\n  feed: true\n  contents: posts\n```\n\nThe [quarto section on feeds](https://quarto.org/docs/websites/website-listings.html#feeds) has more information on this. \n\n## Deploying the site\n\nPreparing the site to be deployed was relatively painless. It's useful to read the [quarto website options page](https://quarto.org/docs/reference/projects/websites.html) before you do this, because it mentions a lot of settings you may want to alter in your `_quarto.yml` file. For example, you can customise the navigation bar, the social media preview images, the search functionality and so on. Once you're getting to the point of being ready to deploy it's worth checking those little details out.\n\nBut as for the deployment process itself, there's not a lot to say. The [quarto deployment page](https://quarto.org/docs/websites/publishing-websites.html) discusses several options for how you can do this. Most of my websites are deployed either through GitHub Pages or through Netlify. This one is a Netlify site, so I've followed the instructions there and everything went smoothly. However, this does bring me to another topic...\n\n## Netlify redirects\n\nI've structured my blog in a particular way. Like the default quarto blog, all the posts live in the `posts` folder, and they're named in a systematic way: they have an ISO-8601 formatted date first, and then a semantic slug. So the full URL for this blog post is:\n\n[blog.djnavarro.net/posts/2022-04-20_porting-to-quarto](https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/)\n\nThat's convenient for archiving purposes and for keeping everything nicely organised in my project folder, but it's also a little clunky for sharing links. In practice, the \"posts\" part is a bit redundant, and I'm never going to use the same slug twice, so it's handy to set it up so that there's also a shorter URL for the post,\n\n[blog.djnavarro.net/porting-to-quarto](https://blog.djnavarro.net/porting-to-quarto/)\n\nand that this URL automatically redirects to the longer one. Since I'm intending to deploy this blog to netlify, what I need to do is ensure that whenever the site builds, a `_redirects` file is created within the `_site` folder. This file needs to have one line per redirect, listing the \"redirect from\" path first, followed by the \"redirect to\" path. Here's what that line looks like for this post:\n\n``` default\n/porting-to-quarto /posts/2022-04-20_porting-to-quarto\n```\n\nI have no intention of adding these lines manually, so what I did instead is add an R chunk to the `index.qmd` file corresponding to the blog home page, with the following code:\n\n``` r\n# list names of post folders\nposts <- list.dirs(\n  path = here::here(\"posts\"),\n  full.names = FALSE,\n  recursive = FALSE\n)\n\n# extract the slugs\nslugs <- gsub(\"^.*_\", \"\", posts)\n\n# lines to insert to a netlify _redirect file\nredirects <- paste0(\"/\", slugs, \" \", \"/posts/\", posts)\n\n# write the _redirect file\nwriteLines(redirects, here::here(\"_site\", \"_redirects\"))\n```\n\nEvery time the site gets rebuilt -- which usually involves rebuilding the home page since that's the one that contains the post listing -- the `_redirects` file gets refreshed.\n\n\n## The quarto CLI {#quarto-cli}\n\nAbout half way through the process of tinkering with my old posts to be suitable for the quarto blog, I decided to stop using RStudio for the rendering, and spent a little time familiarising myself with the quarto command line interface. I haven't made any particular decisions about what my long term workflow with quarto is going to look like, but I did find it helpful to get a feel for the concept of quarto as a standalone install. I'm not going to go into detail here, but just briefly: at the terminal I can see that I have some help options,\n\n::: {.cell}\n\n```{.bash .cell-code}\nquarto help\n```\n:::\n\n```\n  Usage:   quarto \n  Version: 0.9.282\n                  \n\n  Description:\n\n    Quarto CLI\n\n  Options:\n\n    -h, --help     - Show this help.                            \n    -V, --version  - Show the version number for this program.  \n\n  Commands:\n\n    render          [input] [args...]  - Render input file(s) to various document types.                                                \n    serve           [input]            - Serve an interactive document.                                                                 \n    create-project  [dir]              - Create a project for rendering multiple documents                                              \n    preview         [file] [args...]   - Render and preview a Quarto document or website project. Automatically reloads the browser when\n    convert         [input]            - Convert documents to alternate representations.                                                \n    capabilities                       - Query for current capabilities (output formats, engines, kernels etc.)                         \n    check           [target]           - Check and verify correct functioning of Quarto installation and computation engines.           \n    inspect         [path]             - Inspect a Quarto project or input path. Inspecting a project returns its config and engines.   \n    tools           [command] [tool]   - Manage the installation, update, and uninstallation of useful tools.                           \n    help            [command]          - Show this help or the help of a sub-command.\n    \n```\n\nFrom there I can check the help documentation for the `quarto render` command by typing the following,\n\n::: {.cell}\n\n```{.bash .cell-code}\nquarto render help\n```\n:::\n\nand so on. Browsing this documentation in addition to all the excellent content on the quarto website is a useful way of finding additional options. If I wanted to render the current post, and my terminal was currently at the project root folder (i.e., my `quarto-blog` folder), I can render it as follows:\n\n::: {.cell}\n\n```{.bash .cell-code}\nquarto render posts/2022-04-20_porting-to-quarto/index.qmd\n```\n:::\n\nThe ability to do this cleanly from the terminal seems like a handy feature of quarto, though I'll admit I am not yet sure how I'll use it.\n\n## Epilogue\n\n\n<!--------------- appendices go here ----------------->\n\n::: {.cell}\n::: {.cell-output-display}\n## Last updated {.appendix}\n \n2022-04-24 16:56:00 AEST\n \n## Details {.appendix}\n \n[source code](https://github.com/djnavarro/quarto-blog/tree/main/posts/2022-04-20_porting-to-quarto/index.qmd), [R environment](https://github.com/djnavarro/quarto-blog/tree/main/posts/2022-04-20_porting-to-quarto/renv.lock)\n:::\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/jquery-1.12.4/jquery.min.js\"></script>\n<link href=\"../../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"../../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"../../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"../../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-binding-2.1.1/leaflet.js\"></script>\n<script src=\"../../site_libs/leaflet-providers-1.9.0/leaflet-providers_1.9.0.js\"></script>\n<script src=\"../../site_libs/leaflet-providers-plugin-2.1.1/leaflet-providers-plugin.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}